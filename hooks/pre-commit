#!/usr/bin/env bash

###############################################################################
# Pre-commit hooks for Wagtail
# This is shared as a single pre-commit file for installation convenience.
###############################################################################

# Fail on first line that fails.
set -e

# Only keep staged files that are added (A), copied (C) or modified (M).
STAGED=$(git --no-pager diff --name-only --cached --diff-filter=ACM)
# Files which are only partly staged (eg. git add --patch).
PATCH_STAGED=$(git --no-pager diff --name-only --diff-filter=ACM $STAGED)
# Files which are fully staged.
FULLY_STAGED=$(comm -23 <(echo "$STAGED") <(echo "$PATCH_STAGED"))

JS_STAGED=$(grep -e '.js$' -e '.jsx$' <<< "$STAGED" || true)
JS_FULLY_STAGED=$(grep -e '.js$' -e '.jsx$' <<< "$FULLY_STAGED" || true)
CSS_STAGED=$(grep .css$ <<< "$STAGED" || true)
CSS_FULLY_STAGED=$(grep .css$ <<< "$FULLY_STAGED" || true)
SCSS_STAGED=$(grep .scss$ <<< "$STAGED" || true)
SCSS_FULLY_STAGED=$(grep .scss$ <<< "$FULLY_STAGED" || true)
MD_STAGED=$(grep .md$ <<< "$STAGED" || true)
MD_FULLY_STAGED=$(grep .md$ <<< "$FULLY_STAGED" || true)
HTML_STAGED=$(grep .html$ <<< "$STAGED" || true)
HTML_FULLY_STAGED=$(grep .html$ <<< "$FULLY_STAGED" || true)
JSON_STAGED=$(grep .json$ <<< "$STAGED" || true)
JSON_FULLY_STAGED=$(grep .json$ <<< "$FULLY_STAGED" || true)
SNAPSHOT_STAGED=$(grep .snap$ <<< "$STAGED" || true)
YAML_STAGED=$(grep -e '.yml$' -e '.yaml$' <<< "$STAGED" || true)
YAML_FULLY_STAGED=$(grep -e '.yml$' -e '.yaml$' <<< "$FULLY_STAGED" || true)

# Uncomment, and add more variables to the list, for debugging help.
# tr ' ' '\n' <<< "STAGED $STAGED PATCH_STAGED $PATCH_STAGED FULLY_STAGED $FULLY_STAGED

# Execute each pre-commit hook.
PROJECT_ROOT=`git rev-parse --show-toplevel`
GIT_ROOT=`git rev-parse --git-dir`
HOOKS=$PROJECT_ROOT/$GIT_ROOT/hooks/pre-commit.*

###############################################################################
# Pre-commit: whitespace errors
###############################################################################

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1
then
  against=HEAD
else
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Use git diff-index to check for whitespace errors
if ! git diff-index --check --cached $against
then
  echo "Aborting commit due to whitespace errors."
  exit 1
fi

###############################################################################
# Pre-commit: Python linting
###############################################################################

command_exists () {
    type "$1" &> /dev/null ;
}

PY_STAGED=$(grep .py$ <<< "$STAGED" || true)

if [ -n "$PY_STAGED" ];
then
  # Run linting within the vagrant box if it is available; locally otherwise
  if command_exists vagrant && vagrant status | grep -q 'running'
  then
    # Use double quotes for the command so `$PY_STAGED` is interpoled; will be blank otherwise.
    vagrant ssh -c "
      source /home/vagrant/.virtualenvs/bakerydemo/bin/activate &&
      cd /vagrant/wagtail/ &&
      flake8 $PY_STAGED &&
      isort --check-only --diff $PY_STAGED
    "
  else
    flake8 $PY_STAGED
    isort --check-only --diff $PY_STAGED
  fi
fi

###############################################################################
# Pre-commit: HTML linting
###############################################################################

if [ -n "$HTML_STAGED" ];
then
  if command_exists vagrant && vagrant status | grep -q 'running'
  then
    vagrant ssh -c "
      source /home/vagrant/.virtualenvs/bakerydemo/bin/activate &&
      cd /vagrant/wagtail/ &&
      jinjalint --parse-only $HTML_STAGED
    "
  else
    jinjalint --parse-only $HTML_STAGED
  fi
fi

###############################################################################
# Pre-commit: CSS linting
###############################################################################

if [ -n "$SCSS_STAGED" ];
then
  npx stylelint $SCSS_STAGED
fi

###############################################################################
# Pre-commit: JS linting
###############################################################################

if [ -n "$JS_STAGED" ];
then
  npx eslint $JS_STAGED
fi

###############################################################################
# Pre-commit: Client-side tests
###############################################################################

if [ -n "$JS_STAGED" ] || [ -n "$SNAPSHOT_STAGED" ];
then
  npm run test:unit:coverage --silent
fi

###############################################################################
# Pre-commit: Client-side build
###############################################################################

if [ -n "$JS_STAGED" ] || [ -n "$SCSS_STAGED" ];
then
  npm run dist
fi

###############################################################################
# Pre-commit: Documentation build
###############################################################################

DOCS_STAGED=$(grep -e '^docs' <<< "$STAGED" || true)

if [ -n "$DOCS_STAGED" ];
then
  make --directory docs html
fi
