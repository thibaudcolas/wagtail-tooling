const {
  wagtailUpgradeAvailable,
  adminAPIFailure,
  adminAPISlow,
} = require("../backstop/engine_scripts/puppeteer/requestOverrides");

const BAKERYDEMO_HOMEPAGE_ID = 60;
const BAKERYDEMO_EMPTY_BLOG_PAGE_ID = 80;
const BAKERYDEMO_REVISIONS_PAGE_ID = 80;

const PAGE_ID = BAKERYDEMO_HOMEPAGE_ID;

const TEST_ORIGIN = "http://localhost:8000" || process.TEST_ORIGIN;

const categories = {
  Global: "A. Global",
  Dashboard: "B. Dashboard",
  Navigation: "C. Navigation",
  Pages: "D. Pages",
  ModelAdmin: "E. ModelAdmin",
  Images: "F. Images",
  Documents: "G. Documents",
  Snippets: "H. Snippets",
  Forms: "I. Forms",
  Reports: "J. Reports",
  Workflows: "K. Workflows",
  "Workflow tasks": "L. Workflow tasks",
  Users: "M. Users",
  Groups: "N. Groups",
  Sites: "O. Sites",
  Locales: "P. Locales",
  Collections: "Q. Collections",
  Redirects: "R. Redirects",
  "Promoted search": "S. Promoted search",
  "User account": "T. User account",
  Styleguide: "U. Styleguide",
  "Site settings": "V. Site settings",
  Other: "W. Other",
  Auth: "X. Auth",
};

const generateLabels = (scenario) => {
  let fullLabel = `${scenario.label} ${scenario.path}`;

  if (scenario.skip) {
    return {};
  }

  if (scenario.typeSelector) {
    if (Array.isArray(scenario.typeSelector)) {
      fullLabel += ` ${scenario.typeSelector.join(", ")}`;
    } else {
      fullLabel += ` ${scenario.typeSelector}`;
    }
  }

  if (scenario.clickSelector) {
    if (Array.isArray(scenario.clickSelector)) {
      fullLabel += ` ${scenario.clickSelector.join(", ")}`;
    } else {
      fullLabel += ` ${scenario.clickSelector}`;
    }
  }

  if (!fullLabel) {
    throw scenario;
  }

  return {
    fullLabel,
  };
};

const generateScenario = (scenario) => {
  const labels = generateLabels(scenario);
  return {
    url: scenario.url ?? `${TEST_ORIGIN}/admin${scenario.path}`,
    referenceUrl: "",
    readyEvent: "",
    readySelector: "",
    delay: 0,
    hideSelectors: [],
    removeSelectors: [],
    hoverSelector: "",
    clickSelector: "",
    postInteractionWait: 0,
    selectors: [],
    selectorExpansion: true,
    expect: 0,
    misMatchThreshold: 0.1,
    requireSameDimensions: true,
    ...scenario,
    category: categories[scenario.category],
    ...labels,
    states: (scenario.states || []).map((s) => {
      const isObj = typeof s.label !== "undefined";
      const label = `${scenario.label} - ${s.label || s}`;
      return isObj
        ? generateScenario({
            ...scenario,
            ...s,
            label,
            states: [],
          })
        : {
            ...scenario,
            ...s,
            label,
            skip: true,
          };
    }),
  };
};

const composeScenario = (...args) => Object.assign({}, ...args);
const main = composeScenario.bind(null, { selectors: ["main"] });

const base = [
  {
    label: "Global",
    path: "/",
    category: "Global",
    audience: "Editor",
    frequency: "Daily",
    components: [
      "Skip link",
      "No-JS warning message",
      "Sidebar",
      "Header",
      "Messages",
      "Button",
      "Relative date",
      "Status tag",
      "Privacy chooser",
      "Dropdown button",
      "Forms",
      "Table listing",
      "Pagination",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "",
    skip: "intended for reports only",
  },
  {
    label: "Dashboard",
    path: "/",
    category: "Dashboard",
    audience: "Editor",
    frequency: "Daily",
    components: ["Summary metrics", "Upgrade notification", "Table listing"],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    selectors: [".sidebar", "main"],
    // requestOverrides: wagtailUpgradeAvailable,
    states: [
      "Wagtail upgrade",
      "Most recent edits",
      "Pages awaiting moderation",
    ],
    fixturesRequirements: ["Most recent edits", "Pages awaiting moderation"],
  },
  {
    label: "No JS",
    path: "/",
    category: "Navigation",
    audience: "Editor",
    frequency: "Yearly",
    components: ["Capability message"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    disableJS: true,
    notes:
      "“JavaScript is required to use Wagtail, but it is currently disabled.” banner at the top of all pages",
    skip: "This would be possible with page.setJavaScriptEnabled(false), but is not supported by pa11y atm.",
  },
  main({
    label: "Unauthorized access (403)",
    path: "/users/3/delete/",
    category: "Navigation",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Messages"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    notes:
      "“Sorry, you do not have permission to access this area.” message at the top of the dashboard",
    actions: ["wait for element .error to be visible"],
  }),
];

const nav = [
  {
    label: "Sub-menu",
    path: "/",
    category: "Navigation",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "None",
    nextReleaseTarget: "N/A",
    skip: "Needs troubleshooting",
    clickSelector: ".sidebar-sub-menu-item [aria-haspopup='menu']",
  },
  {
    label: "Pages explorer",
    path: "/",
    category: "Navigation",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "None",
    nextReleaseTarget: "N/A",
    skip: "Needs troubleshooting",
    clickSelector: '.sidebar-page-explorer-item [aria-haspopup="dialog"]',
    states: [
      {
        label: "Loading",
        actions: [
          'click element a.sidebar-menu-item__link[aria-haspopup="dialog"]',
          "wait for element .sidebar-panel--open to be visible",
        ],
        requestOverrides: adminAPISlow,
        skip: true,
      },
      {
        label: "Server error",
        actions: [
          'click element a.sidebar-menu-item__link[aria-haspopup="dialog"]',
          "wait for element .sidebar-panel--open to be visible",
        ],
        requestOverrides: adminAPIFailure,
        skip: true,
      },
    ],
  },
  {
    label: "Pages explorer, level 2",
    path: "/",
    category: "Navigation",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "None",
    nextReleaseTarget: "N/A",
    skip: "Needs troubleshooting",
    skipReport: true,
    clickSelector: [
      '.sidebar-page-explorer-item [aria-haspopup="dialog"]',
      ".c-page-explorer__item__action:last-of-type",
    ],
    onReadySelector: ".c-page-explorer__item:nth-child(2)",
  },
];

const pages = [
  main({
    label: "Add child page",
    path: "/pages/1/add_subpage/",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Page type usage",
    path: "/pages/usage/base/standardpage/",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: [
      "Table listing",
      "Paginated",
      ,
      "Dropdown button",
      "Status tag",
      "Human date",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Move - Start",
    path: `/pages/80/move/${BAKERYDEMO_HOMEPAGE_ID}/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: [
      "Listing (navigable)",
      "Paginated",
      "Status tag",
      "Relative date",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Paginated", "No move target"],
  }),
  main({
    label: "Move - Confirm",
    path: `/pages/80/move/76/confirm/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
  main({
    label: "Copy",
    path: "/pages/80/copy/",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Forms", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      {
        label: "Validation error",
        actions: [
          'click element [value="Copy this page"]',
          "wait for element .error-message to be visible",
        ],
        skip: "TODO troubleshoot CSRF issue.",
      },
      {
        label: "Success",
        actions: [],
        skip: "TODO troubleshoot CSRF issue.",
      },
    ],
  }),
  main({
    label: "Delete",
    path: "/pages/80/delete/",
    category: "Pages",
    audience: "Editor",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      {
        label: "Success",
        actions: [
          'click element [value="Yes, delete it"]',
          "wait for element .success to be visible",
        ],
        skip: "TODO troubleshoot CSRF issue. And do we really want to delete a page?",
      },
    ],
  }),
  main({
    label: "Unpublish",
    path: `/pages/${BAKERYDEMO_EMPTY_BLOG_PAGE_ID}/unpublish/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Checkbox"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      {
        label: "Success",
        actions: [
          'click element [value="Yes, unpublish it"]',
          "wait for element .success to be visible",
        ],
        skip: "TODO troubleshoot CSRF issue",
      },
    ],
    fixturesRequirements: ["Empty blog index page"],
  }),
  main({
    label: "View all revisions",
    path: `/pages/${BAKERYDEMO_REVISIONS_PAGE_ID}/history/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Table listing", "Listing filters"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      {
        label: "Sorted",
      },
      {
        label: "Paginated",
        skip: "Not implemented",
      },
    ],
  }),
  main({
    label: "Compare revisions",
    path: `/pages/${BAKERYDEMO_REVISIONS_PAGE_ID}/revisions/compare/7...68/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Table listing", "Content diff"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
  }),
  main({
    label: "Review revision",
    path: `/pages/${BAKERYDEMO_REVISIONS_PAGE_ID}/revisions/68/revert/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: [
      {
        label: "Success",
        actions: [
          "click element .action-save",
          "wait for element .success to be visible",
        ],
        skip: "TODO troubleshoot CSRF issue",
      },
    ],
    notes:
      "Uses the standard page editing UI, but with a top banner and different footer",
  }),
  main({
    label: "Create",
    path: "/pages/add/base/homepage/60/",
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Re-implement",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Edit",
    path: "/pages/60/edit/",
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Reimplement",
    states: ["Validation error", "Success", "Locked"],
  }),
  main({
    label: "Edit - Promote tab",
    path: "/pages/60/edit/#tab-promote",
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Reimplement",
    states: ["Validation error", "Success", "Locked"],
  }),
  main({
    label: "Edit - Settings tab",
    path: "/pages/60/edit/#tab-settings",
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Reimplement",
    states: ["Validation error", "Success", "Locked"],
  }),
  {
    label: "Preview",
    path: `/pages/${PAGE_ID}/edit/preview/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: ["Edit bird"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    notes:
      "This serves the same view as the “live” page, but with different content. This should at least change the page title to make it clear it's a revision",
    skip: "Not reviewable automatically",
  },
  main({
    label: "Explorer - Bulk move",
    path: "/bulk/wagtailcore/page/move/?id=109&id=108&id=107&id=100&id=93&id=81",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Explorer - Bulk delete",
    path: "/bulk/wagtailcore/page/delete/?id=109&id=108&id=107&id=100&id=93&id=81",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Explorer - Bulk publish",
    path: "/bulk/wagtailcore/page/publish/?id=109&id=108&id=107&id=100&id=93&id=81",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Checkbox"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Explorer - Bulk unpublish",
    path: "/bulk/wagtailcore/page/unpublish/?id=61&id=3&id=76&id=63&id=70&id=69",
    category: "Pages",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Explorer - View child pages",
    path: `/pages/${PAGE_ID}/`,
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: [
      "Pages listing header",
      "Table listing",
      "Bulk actions",
      "Dropdown button",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "Empty",
      "Paginated",
      "Sorted",
      "Paginated",
      main({
        label: "Reorder child pages",
        path: `/pages/${PAGE_ID}/?ordering=ord`,
        category: "Pages",
        audience: "Editor",
        frequency: "Daily",
        components: ["Listing drag and drop"],
        lastUpdated: "v2",
        workNeeded: "",
        nextReleaseTarget: "N/A",
        states: ["Reorder success"],
      }),
      main({
        label: "Root level",
        path: "/pages/",
        components: ["Help block"],
      }),
    ],
  }),

  main({
    label: "Search",
    path: "/pages/search/",
    category: "Pages",
    audience: "Editor",
    frequency: "Daily",
    components: ["Header", "Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      main({
        label: "Empty",
        path: "/pages/search/?q=pain",
      }),
      main({
        label: "Paginated",
        path: "/pages/search/?q=b",
      }),
      main({
        label: "Sorted",
        path: "/pages/search/?ordering=title&q=bread",
      }),
      main({
        label: "Filtered",
        path: "/pages/search/?q=bread&content_type=blog.blogpage",
      }),
    ],
  }),
];

const modeladmin = [
  main({
    label: "View all",
    path: "/base/people/",
    category: "ModelAdmin",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Table filters", "Search field"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Sort by column"],
  }),
  main({
    label: "Edit",
    path: "/base/people/edit/1/",
    category: "ModelAdmin",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Rework",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "History",
    path: "/base/people/history/1/",
    category: "ModelAdmin",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Add",
    path: "/base/people/create/",
    category: "ModelAdmin",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Rework",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Delete",
    path: "/base/people/delete/1/",
    category: "ModelAdmin",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const images = [
  main({
    label: "View all",
    path: "/images/",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Search field"],
    hideSelectors: [".show-transparency"],
  }),
  main({
    label: "Search",
    path: "/images/?q=bread",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: ["Top row (images)"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "Empty",
      "Paginated",
      main({
        label: "Filtered",
        path: "/images/?collection_id=2",
      }),
    ],
  }),
  main({
    label: "Edit",
    path: "/images/47/",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms", "Image crop", "Focal point picker"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "File not found error on load",
      "Validation error",
      "Focal point set",
      "Success",
    ],
  }),
  main({
    label: "Add an image",
    path: "/images/add/",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "File not found error on load",
      "Validation error",
      "Focal point set",
      "Success",
    ],
  }),
  main({
    label: "Add multiple images",
    path: "/images/multiple/add/",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: ["File drop area"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "File not found error on load",
      "Validation error",
      "Focal point set",
      "Success",
    ],
  }),
  main({
    label: "Delete",
    path: "/images/43/delete/",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
  main({
    label: "Image URL generator",
    path: "/images/43/generate_url/",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Focal point set"],
  }),
  main({
    label: "Bulk add tags",
    path: "/bulk/wagtailimages/image/add_tags/?p=3&id=52&id=53",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Bulk add to collection",
    path: "/bulk/wagtailimages/image/add_to_collection/?p=3&id=53",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Bulk delete",
    path: "/bulk/wagtailimages/image/delete/?p=3&id=52",
    category: "Images",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
];

const documents = [
  main({
    label: "View all",
    path: "/documents/",
    category: "Documents",
    audience: "Editor",
    frequency: "Daily",
    components: [
      "Search field",
      "Paginated",
      "Table listing",
      "Listing filters",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Sorted"],
  }),
  main({
    label: "Search",
    path: "/documents/?q=zoo",
    category: "Documents",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "Empty",
      "Paginated",
      main({
        label: "Filtered",
        path: "/documents/?collection_id=2",
      }),
    ],
  }),
  main({
    label: "Edit",
    path: "/documents/edit/1/",
    category: "Documents",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["File not found error on load", "Validation error", "Success"],
  }),
  main({
    label: "Add a document",
    path: "/documents/add/",
    category: "Documents",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Add multiple documents",
    path: "/documents/multiple/add/",
    category: "Documents",
    audience: "Editor",
    frequency: "Daily",
    components: ["File drop area"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Loading", "Validation error", "Success"],
  }),
  main({
    label: "Delete",
    path: "/documents/delete/1/",
    category: "Documents",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Success"],
  }),
];

const snippets = [
  main({
    label: "View all types",
    path: "/snippets/",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty"],
  }),
  main({
    label: "View all",
    path: "/snippets/base/people/",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Search field"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Delete selected"],
  }),
  main({
    label: "Search snippets",
    path: "/snippets/base/people/?q=test",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated"],
  }),

  main({
    label: "Edit",
    path: "/snippets/base/people/1/",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Add",
    path: "/snippets/base/people/add/",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Delete",
    path: "/snippets/base/people/1/delete/",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
  main({
    label: "Bulk delete",
    path: "/snippets/breads/breadingredient/multiple/delete/?id=1&id=2&id=3&id=4&id=5",
    category: "Snippets",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const forms = [
  main({
    label: "View all",
    path: "/forms/",
    category: "Forms",
    audience: "Editor",
    frequency: "Daily",
    components: ["Dropdown (legacy)", "Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "View submissions",
    path: "/forms/submissions/69/",
    category: "Forms",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Datetimepicker"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Sorted", "Delete selected"],
    skip: "Needs troubleshooting",
  }),
];

const reports = [
  main({
    label: "Locked Pages",
    path: "/reports/locked/",
    category: "Reports",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Listing filters", "Dropdown button"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Filtered"],
  }),
  main({
    label: "Workflows",
    path: "/reports/workflow/",
    category: "Reports",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Listing filters", "Dropdown button"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Filtered"],
  }),
  main({
    label: "Workflow tasks",
    path: "/reports/workflow_tasks/",
    category: "Reports",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Listing filters", "Dropdown button"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Filtered"],
  }),
  main({
    label: "Site history",
    path: "/reports/site-history/",
    category: "Reports",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Table listing", "Listing filters", "Dropdown button"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Filtered"],
  }),
  main({
    label: "Aging pages",
    path: "/reports/aging-pages/",
    category: "Reports",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Table listing", "Listing filters", "Dropdown button"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Filtered"],
  }),
];

const workflows = [
  main({
    label: "View all",
    path: "/workflows/list/",
    category: "Workflows",
    audience: "Editor",
    frequency: "Daily",
    components: ["Table listing", "Workflow tasks cards"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated", "Show disabled"],
  }),
  main({
    label: "Add",
    path: "/workflows/add/",
    category: "Workflows",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reimplement",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Usage",
    path: "/workflows/usage/1/",
    category: "Workflows",
    audience: "Editor",
    frequency: "Monthly",
    components: ["Table listing", "Status tag"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Edit",
    path: "/workflows/edit/1/",
    category: "Workflows",
    audience: "Editor",
    frequency: "Daily",
    components: ["Forms", "InlinePanel", "Task chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
  }),
];

const workflowTasks = [
  main({
    label: "View all",
    path: "/workflows/tasks/index/",
    category: "Workflow tasks",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Add",
    path: "/workflows/tasks/add/wagtailcore/groupapprovaltask/",
    category: "Workflow tasks",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Edit",
    path: "/workflows/tasks/edit/1/",
    category: "Workflow tasks",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Disable",
    path: "/workflows/tasks/disable/1/",
    category: "Workflow tasks",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const users = [
  main({
    label: "View all",
    path: "/users/",
    category: "Users",
    audience: "Admin",
    frequency: "Daily",
    components: ["Table listing", "Search field"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Sorted", "Paginated"],
  }),
  main({
    label: "Search",
    path: "/users/?q=admin",
    category: "Users",
    audience: "Admin",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Edit",
    path: "/users/3/",
    category: "Users",
    audience: "Admin",
    frequency: "Daily",
    components: ["Forms", "Tabs"],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Reimplement",
    states: [
      "Validation error",
      "Success",
      main({
        label: "Edit roles",
        path: "/users/3/#tab-roles",
      }),
    ],
  }),
  main({
    label: "Add",
    path: "/users/add/",
    category: "Users",
    audience: "Admin",
    frequency: "Daily",
    components: ["Forms", "Tabs"],
    lastUpdated: "v3",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "Validation error",
      "Success",
      main({
        label: "Add roles",
        path: "/users/add/#tab-roles",
      }),
    ],
  }),

  main({
    label: "Delete",
    path: "/users/4/delete/",
    category: "Users",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
  main({
    label: "Bulk delete",
    path: "/bulk/auth/user/delete/?next=%2Fadmin%2Fusers%2F&id=4",
    category: "Users",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const groups = [
  main({
    label: "View all",
    path: "/groups/",
    category: "Groups",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Empty", "Paginated", "Sorted"],
  }),
  main({
    label: "Search",
    path: "/groups/?q=edi",
    category: "Groups",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Add a group",
    path: "/groups/new/",
    category: "Groups",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Permission picker"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Edit",
    path: "/groups/1/",
    category: "Groups",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Permission picker"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "Validation error",
      "Success",
      main({
        label: "Add permissions",
        skipReport: true,
        clickSelector: [
          "#id_page_permissions-ADD",
          "#id_document_permissions-ADD",
          "#id_image_permissions-ADD",
        ],
      }),
      main({
        label: "Delete permissions",
        skipReport: true,
        clickSelector: [
          "#id_page_permissions-0-DELETE-button",
          "#id_document_permissions-0-DELETE-button",
          "#id_image_permissions-0-DELETE-button",
        ],
        skip: "Needs troubleshooting",
      }),
    ],
  }),
  main({
    label: "Delete",
    path: "/groups/1/delete/",
    category: "Groups",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
  main({
    label: "Group users",
    path: "/groups/2/users/",
    category: "Groups",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Search field", "Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Sorted", "Paginated"],
  }),
];

const sites = [
  main({
    label: "View all",
    path: "/sites/",
    category: "Sites",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Table listing", "Status tag"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Sorted"],
  }),
  main({
    label: "Edit",
    path: "/sites/2/",
    category: "Sites",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Forms", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Add a site",
    path: "/sites/new/",
    category: "Sites",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Forms", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Delete",
    path: "/sites/2/delete/",
    category: "Sites",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const locales = [
  main({
    label: "View all",
    path: "/locales/",
    category: "Locales",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Sorted"],
  }),
  main({
    label: "Edit",
    path: "/locales/2/",
    category: "Locales",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Select"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Add a locale",
    path: "/locales/new/",
    category: "Locales",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Select"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Delete",
    path: "/locales/2/delete/",
    category: "Locales",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const collections = [
  main({
    label: "View all",
    path: "/collections/",
    category: "Collections",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty"],
  }),
  main({
    label: "Edit",
    path: "/collections/2/",
    category: "Collections",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Forms", "Privacy chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: [
      "Validation error",
      "Success",
      main({
        label: "Set privacy",
        states: ["Validation error", "Success"],
        clickSelector: ["[data-action-set-privacy]"],
      }),
    ],
  }),
  main({
    label: "Add a collection",
    path: "/collections/add/",
    category: "Collections",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Forms", "Privacy chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Delete (disallowed)",
    path: "/collections/2/delete/",
    category: "Collections",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
  main({
    label: "Delete (allowed)",
    path: "/collections/5/delete/",
    category: "Collections",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const redirects = [
  main({
    label: "View all",
    path: "/redirects/",
    category: "Redirects",
    audience: "Admin",
    frequency: "Daily",
    components: [
      "Table listing",
      "Search field",
      "Status tag",
      "Dropdown button",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Sorted", "Paginated"],
  }),
  main({
    label: "Search",
    path: "/redirects/?q=test",
    category: "Redirects",
    audience: "Admin",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Import redirects",
    path: "/redirects/import/",
    category: "Redirects",
    audience: "Admin",
    frequency: "Monthly",
    components: ["Forms", "Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Add",
    path: "/redirects/add/",
    category: "Redirects",
    audience: "Author",
    frequency: "Daily",
    components: ["Forms", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
  }),
  main({
    label: "Export Redirects",
    path: "/redirects/report",
    category: "Redirects",
    audience: "Admin",
    frequency: "Yearly",
    components: [
      "Table listing",
      "Dropdown button",
      "Listing filters",
      "Status tag",
    ],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Sorted", "Paginated", "Filtered"],
  }),
  main({
    label: "Edit",
    path: "/redirects/1/",
    category: "Redirects",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Forms", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Delete",
    path: "/redirects/1/delete/",
    category: "Redirects",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const promotedSearchResults = [
  main({
    label: "View all",
    path: "/searchpicks/",
    category: "Promoted search",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Search field", "Table listing"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Search",
    path: "/searchpicks/?q=bread",
    category: "Promoted search",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Empty", "Paginated"],
  }),
  main({
    label: "Edit",
    path: "/searchpicks/4/",
    category: "Promoted search",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Help block", "Promoted search term chooser", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Add results",
    path: "/searchpicks/add/",
    category: "Promoted search",
    audience: "Admin",
    frequency: "Yearly",
    components: ["Help block", "Promoted search term chooser", "Page chooser"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
    clickSelector: "#id_query_string-chooser",
    onReadySelector: '[action="/admin/search/queries/chooser/results/"]',
  }),
  main({
    label: "Delete",
    path: "/searchpicks/4/delete/",
    category: "Promoted search",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "Reskin",
    states: ["Success"],
  }),
];

const account = [
  main({
    label: "Account profile",
    path: "/account/",
    category: "User account",
    audience: "Editor",
    frequency: "Yearly",
    components: ["Header", "Tabs", "Forms"],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
  }),
  main({
    label: "Account notifications",
    path: "/account/#tab-notifications",
    category: "User account",
    audience: "Editor",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    states: ["Validation error", "Success"],
  }),
];

const styleguide = [
  main({
    label: "Styleguide",
    path: "/styleguide/",
    category: "Styleguide",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    viewports: [
      {
        label: "Full",
        width: 1024,
        height: 15000,
      },
    ],
  }),
];

const settingsContrib = [
  {
    label: "Site settings",
    path: "/",
    category: "Site settings",
    audience: "Admin",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    skip: "Left out for now",
    skipReport: "Left out",
  },
];

const settings = [
  ...reports,
  ...workflows,
  ...workflowTasks,
  ...users,
  ...groups,
  ...sites,
  ...locales,
  ...collections,
  ...redirects,
  ...promotedSearchResults,
  ...account,
  ...settingsContrib,
];

const other = [
  {
    label: "404",
    path: "/404/",
    category: "Other",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
  },
  {
    label: "Login",
    path: "/login/?next=/admin/login",
    category: "Auth",
    audience: "Editor",
    frequency: "Daily",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    unauthenticated: true,
    states: [
      {
        label: "Validation error",
        actions: [
          'click element [type="submit"]',
          "wait for element .error to be visible",
        ],
        skip: true,
      },
    ],
  },
  {
    label: "Logout",
    path: "/login/?next=/admin/logout/",
    category: "Auth",
    audience: "Editor",
    frequency: "Yearly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    notes: "“You have been successfully logged out.” message on Login screen",
    skip: "Revokes the session cookie, which is annoying when testing.",
    skipReport: true,
    actions: [
      "set field #id_username to admin",
      "set field #id_password to changeme",
      'click element [type="submit"]',
      "wait for element .success to be visible",
    ],
  },
  {
    label: "Password reset",
    path: "/password_reset/",
    category: "Auth",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    unauthenticated: true,
    states: [
      {
        label: "Validation error",
        actions: [
          'click element [type="submit"]',
          "wait for element .error to be visible",
        ],
        skip: true,
      },
    ],
  },
  {
    label: "Password reset done",
    path: "/password_reset/done/",
    category: "Auth",
    audience: "Editor",
    frequency: "Monthly",
    components: [],
    lastUpdated: "v2",
    workNeeded: "",
    nextReleaseTarget: "N/A",
    unauthenticated: true,
  },
];

const scenarios = [
  ...base,
  ...nav,
  ...pages,
  ...modeladmin,
  ...images,
  ...documents,
  ...snippets,
  ...forms,
  ...settings,
  ...styleguide,
  ...other,
];

module.exports = scenarios.map(generateScenario);
